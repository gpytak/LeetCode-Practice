const int INF = 2e9;
class Solution {
public:
    int minimumXORSum(vector<int>& a, vector<int>& b) {
        int n = a.size();
        vector<int> dp(1<<n, INF);

        dp[0] = 0;  
        for(int mask = 0; mask < (1<<n); mask++) {
            int i = __builtin_popcount(mask);
            for(int j = 0; j < n; j++) {
                if ((mask & (1<<j)))
                    continue;
                dp[mask | (1<<j)] = min(dp[mask | (1<<j)], dp[mask] + (a[i] ^ b[j]));
            }
        }
        return dp[(1<<n) - 1];
    }
};
