class Solution {
public:
    vector<vector<int>> rotateGrid(vector<vector<int>>& grid, int k) {
        int m = grid.size();
        int n = grid[0].size();
        int numLayers = min(m,n)/2;

        for (int layer=0; layer<numLayers; layer++) {
            vector<int> nums;

            // Top row
            for (int i=layer; i<n-layer-1; i++) {
                nums.push_back(grid[layer][i]);
            }

            // Right column
            for (int i=layer; i<m-layer-1; i++) {
                nums.push_back(grid[i][n-layer-1]);
            }

            // Bottom row
            for (int i=n-layer-1; i>layer; i--) {
                nums.push_back(grid[m-layer-1][i]);
            }

            // Left row
            for (int i=m-layer-1; i>layer; i--) {
                nums.push_back(grid[i][layer]);
            }
            
            int idx = k;

            // Top row
            for (int i=layer; i<n-layer-1; i++) {
                grid[layer][i] = nums[idx%nums.size()];
                idx++;
            }

            // Right column
            for (int i=layer; i<m-layer-1; i++) {
                grid[i][n-layer-1] = nums[idx%nums.size()];
                idx++;
            }

            // Bottom row
            for (int i=n-layer-1; i>layer; i--) {
                grid[m-layer-1][i] = nums[idx%nums.size()];
                idx++;
            }

            // Left row
            for (int i=m-layer-1; i>layer; i--) {
                grid[i][layer] = nums[idx%nums.size()];
                idx++;
            }
        }
        return grid;
    }
};
