class Solution {
public:
    int waysToPartition(vector<int>& nums, int k) {
        map<long long,int> m,m1;
        int n=nums.size(); long long sum=0; vector<long long>pre(n,0);
        for(int i=0;i<n;i++){
             sum+= nums[i]; if(i<n-1)m[sum]++; pre[i]=sum;
        }
        int ans=0;
        if(sum%2==0 && m.find(sum/2)!= m.end()) ans=m[sum/2];
        for(int i=0;i<n;i++){
            int d= k-nums[i];
            int ns= sum+d; int x=0;
            if(ns%2==0){
                if(m.find(ns/2-d)!= m.end()) x=m[ns/2-d];
                 if(m1.find(ns/2)!= m1.end()) x+= m1[ns/2];
                 ans= max(ans,x);
            }
            m[pre[i]]--; m1[pre[i]]++;
        } 
        return ans;
    }
};
